USER@DESKTOP-GJPAP41 MINGW64 ~
$ git verson
git: 'verson' is not a git command. See 'git --help'.

The most similar command is
        version

USER@DESKTOP-GJPAP41 MINGW64 ~
$ git --version
git version 2.39.0.windows.2

USER@DESKTOP-GJPAP41 MINGW64 ~
$ git help
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

USER@DESKTOP-GJPAP41 MINGW64 ~
$ git --help
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

USER@DESKTOP-GJPAP41 MINGW64 ~
$ git config --global user.name "khalilfeisal"

USER@DESKTOP-GJPAP41 MINGW64 ~
$ ^C

USER@DESKTOP-GJPAP41 MINGW64 ~
$ git config --global user.email khalilme3@gmail.com

USER@DESKTOP-GJPAP41 MINGW64 ~
$ git config --list
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=master
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
user.name=khalilfeisal
user.email=khalilme3@gmail.com

USER@DESKTOP-GJPAP41 MINGW64 ~
$ cd Desktop

USER@DESKTOP-GJPAP41 MINGW64 ~/Desktop
$ mkdir Git_Demo

USER@DESKTOP-GJPAP41 MINGW64 ~/Desktop
$ cd Git_Demo

USER@DESKTOP-GJPAP41 MINGW64 ~/Desktop/Git_Demo
$ mkdir FirstRepo

USER@DESKTOP-GJPAP41 MINGW64 ~/Desktop/Git_Demo
$ cd FirstRepo/

USER@DESKTOP-GJPAP41 MINGW64 ~/Desktop/Git_Demo/FirstRepo
$ pwd
/c/Users/USER/Desktop/Git_Demo/FirstRepo

USER@DESKTOP-GJPAP41 MINGW64 ~/Desktop/Git_Demo/FirstRepo
$ git init
Initialized empty Git repository in C:/Users/USER/Desktop/Git_Demo/FirstRepo/.git/

USER@DESKTOP-GJPAP41 MINGW64 ~/Desktop/Git_Demo/FirstRepo (master)
$ touch master.txt

USER@DESKTOP-GJPAP41 MINGW64 ~/Desktop/Git_Demo/FirstRepo (master)
$ notepad master.txt

USER@DESKTOP-GJPAP41 MINGW64 ~/Desktop/Git_Demo/FirstRepo (master)
$ touch master.py

USER@DESKTOP-GJPAP41 MINGW64 ~/Desktop/Git_Demo/FirstRepo (master)
$ pycharm master.py
bash: pycharm: command not found

USER@DESKTOP-GJPAP41 MINGW64 ~/Desktop/Git_Demo/FirstRepo (master)
$ python master.py

USER@DESKTOP-GJPAP41 MINGW64 ~/Desktop/Git_Demo/FirstRepo (master)
$ py master.py

USER@DESKTOP-GJPAP41 MINGW64 ~/Desktop/Git_Demo/FirstRepo (master)
$ notepad master.py



